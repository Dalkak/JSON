{"version":3,"file":"JSON.modern.js","sources":["../index.ts"],"sourcesContent":["import {\r\n    Pack, Block, Literal, Type, Dict\r\n} from \"dalkak\";\r\n\r\nexport default new Pack(\r\n    new Dict, \r\n    \"JSON\",\r\n    {\r\n        parse: new Block(\r\n            new Dict, \r\n            \"parse\",\r\n            \"(json)해석하고 변수(val)에 담기\",\r\n            (param, info) => {\r\n                var Entry = (info as {\r\n                    data\r\n                }).data.Entry;\r\n                if (!Entry.variableContainer.getVariableByName(param.val)) {\r\n                    Entry.variableContainer.appendVariables([{\r\n                        name: param.val\r\n                    }]);\r\n                }\r\n                Entry.variableContainer.getVariableByName(param.val).setValue(JSON.parse(param.json));\r\n            }\r\n        ),\r\n        get: new Block(\r\n            new Dict, \r\n            \"get\",\r\n            \"변수(input)의(propName)값 구하고 변수(val)에 담기\",\r\n            (param, info) => {\r\n                var Entry = (info as {\r\n                    data\r\n                }).data.Entry;\r\n                if (!Entry.variableContainer.getVariableByName(param.val)) {\r\n                    Entry.variableContainer.appendVariables([{\r\n                        name: param.val\r\n                    }]);\r\n                }\r\n                Entry.variableContainer.getVariableByName(param.val).setValue(Entry.variableContainer.getVariableByName(param.input).getValue()[param.propName]);\r\n            }\r\n        ),\r\n        set: new Block(\r\n            new Dict, \r\n            \"set\",\r\n            \"변수(val)의(propName)값을(data)로 정하기\",\r\n            (param, info) => {\r\n                var Entry = (info as {\r\n                    data\r\n                }).data.Entry;\r\n                if (!Entry.variableContainer.getVariableByName(param.val)) {\r\n                    Entry.variableContainer.appendVariables([{\r\n                        name: param.val\r\n                    }]);\r\n                }\r\n                Entry.variableContainer.getVariableByName(param.val).getValue()[param.propName] = param.data;\r\n            }\r\n        )\r\n    }\r\n);"],"names":["Pack","Dict","parse","Block","param","info","Entry","data","variableContainer","getVariableByName","val","appendVariables","name","setValue","JSON","json","get","input","getValue","propName","set"],"mappings":"mDAIA,UAAmBA,EACf,IAAIC,EACJ,OACA,CACIC,MAAO,IAAIC,EACP,IAAIF,EACJ,QACA,yBACA,SAACG,EAAOC,GACJ,IAAIC,EAASD,EAEVE,KAAKD,MACHA,EAAME,kBAAkBC,kBAAkBL,EAAMM,MACjDJ,EAAME,kBAAkBG,gBAAgB,CAAC,CACrCC,KAAMR,EAAMM,OAGpBJ,EAAME,kBAAkBC,kBAAkBL,EAAMM,KAAKG,SAASC,KAAKZ,MAAME,EAAMW,SAGvFC,IAAK,IAAIb,EACL,IAAIF,EACJ,MACA,wCACA,SAACG,EAAOC,GACJ,IAAIC,EAASD,EAEVE,KAAKD,MACHA,EAAME,kBAAkBC,kBAAkBL,EAAMM,MACjDJ,EAAME,kBAAkBG,gBAAgB,CAAC,CACrCC,KAAMR,EAAMM,OAGpBJ,EAAME,kBAAkBC,kBAAkBL,EAAMM,KAAKG,SAASP,EAAME,kBAAkBC,kBAAkBL,EAAMa,OAAOC,WAAWd,EAAMe,aAG9IC,IAAK,IAAIjB,EACL,IAAIF,EACJ,MACA,kCACA,SAACG,EAAOC,GACJ,IAAIC,EAASD,EAEVE,KAAKD,MACHA,EAAME,kBAAkBC,kBAAkBL,EAAMM,MACjDJ,EAAME,kBAAkBG,gBAAgB,CAAC,CACrCC,KAAMR,EAAMM,OAGpBJ,EAAME,kBAAkBC,kBAAkBL,EAAMM,KAAKQ,WAAWd,EAAMe,UAAYf,EAAMG"}